#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Performance Report on EC2 Instances
\end_layout

\begin_layout Author
Vineet Kumar, Phuc Xuan Nguyen
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The aim of this project is to measure performance on Amazon's EC2 instances.
 For the first portion of this project we measure the overhead of CPU, schedulin
g and OS services.
 All the code for our tests was written in C.
 We used gcc 4.6.1 with no optimizations to run our code.
 Collecting machine description information, measuring procedure call overhead
 and measurment overhead were done by Phuc Xuan Nguyen.
 Measurement of system call overhead, process creation, kernel thread creation,
 process context switch and kernel context switch were done by Vineet Kumar.
 We think we spent in total of around 7 working days for this portion of
 the project.
\end_layout

\begin_layout Section
Machine Description
\end_layout

\begin_layout Standard
We are aiming to measure the performance on the Amazon's t1.micro instances.
\end_layout

\begin_layout Itemize
1 Elastic Computing Unit
\end_layout

\begin_layout Itemize
Processor: Intel(c) Xeon(R) CPU E5430 @ 2.66Ghz.
\end_layout

\begin_deeper
\begin_layout Itemize
12M L2 Cache, 1333 Mhz FSB
\end_layout

\end_deeper
\begin_layout Itemize
Memory: 592MiB
\end_layout

\begin_layout Itemize
Netword card speed
\end_layout

\begin_deeper
\begin_layout Itemize
Between EC2 Instances: 100MB/s
\end_layout

\end_deeper
\begin_layout Itemize
Disk: Amazon Elastic Block (EBS)
\end_layout

\begin_deeper
\begin_layout Itemize
Size: 7.9GB
\end_layout

\end_deeper
\begin_layout Itemize
Operating System: Ubuntu Oneric 11.10
\end_layout

\begin_layout Section
CPU Operation
\end_layout

\begin_layout Standard
For all our experiments we use RDTSC counter.
 To obtain time we divide this by the CPU frequency.
 Also of all the data seen, we discard the best and worst 10
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset

 of data and then take mean values.
\end_layout

\begin_layout Subsection
Measurement overhead
\end_layout

\begin_layout Standard
We are using RDTSC as a fine-grained counter to measure the performance.
 In order to calculate the overhead of RDSTC, we run the following experiment.
\end_layout

\begin_layout Standard
Function 1:
\end_layout

\begin_layout Itemize
Get initial clock counter
\end_layout

\begin_layout Itemize
Repeat N times:
\end_layout

\begin_deeper
\begin_layout Itemize
Run RDTSC
\end_layout

\begin_layout Itemize
Perform a random function f
\end_layout

\end_deeper
\begin_layout Itemize
Return the difference between the current and the initial clock counter.
\end_layout

\begin_layout Standard
Function 2:
\end_layout

\begin_layout Itemize
Get initial clock counter
\end_layout

\begin_layout Itemize
Repeat N times:
\end_layout

\begin_deeper
\begin_layout Itemize
Perform a random function f
\end_layout

\end_deeper
\begin_layout Itemize
Return the difference between the current and the initial clock counter
\end_layout

\begin_layout Standard
We find that the variance becomes insignificant when N is around 10000.
 We avoid the possible compiler optimization by running the random function
 f.
\end_layout

\begin_layout Standard
We calculate the difference in the result of Function 2 and Function 1 and
 divide that by N to find the overhead of RDTSC.
 In the t1.micro instance.
\end_layout

\begin_layout Subsection
Procedure call overhead
\end_layout

\begin_layout Standard
To find out the procedure call overhead, we perform two simple operations
 (int x = 1+1; int y = x;) in 9 different scenarios: no procedure call and
 procedure calls with the 0-7 parameters.
 Figure ? describes the increment in overhead.
\end_layout

\begin_layout Standard
The result is gathered after running 1,000,000 iterations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Clock cycle(param)* -1 means no procedure call
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
System call overhead
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

To measure system call overhead, we need to do measurements on a system
 call that does not do much work.
 We do our experiments by calling ``getpid()'' and by writing one byte to
 the device devnull.
 We notice that for both these  experiments if we run a tight loop within
 a single process, the system call gets cached and thus does not give us
 correct overhead measurements.
 Thus, we handle this issue by running the test within a context of different
 process.
 We run the test for 10,000 iterations.
 Table 1 shows the results:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
Table 1: System call overhead
\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Call
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time - cached(
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
mu$s
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Std.
 dev- cached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time - uncached
\begin_inset ERT
status open

\begin_layout Plain Layout

($
\backslash
mu$s
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Std.
 dev - uncached
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getpid()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0033
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.13
\begin_inset Formula $\%$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8471
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write to devnull
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0034
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.12
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.5071
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Task creation time
\end_layout

\begin_layout Standard
We measure the task creation time by calling the timer before a fork() is
 issued and immediately inside the child process.
 We repeat this process for 10, 000 iterations.
 To measure the creation time for a kernel thread - we use posix thread
 attributes to tie a user thread to a kernel level thread.
 We repeat these experiments 10,000 times.
 Table 2 shows the results
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
Table 2: Process and kernel thread creation overhead 
\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time
(
\lang english

\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
mu$s)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Std.
 deviation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process creation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
268.86
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kernel Thread Creation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.707
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Context switching time
\end_layout

\begin_layout Standard
We measure context switch time by passing a token across pipes.
 We create a total of 4 pipes to accomplish a 2 way communication and measure
 the round trip time.
 This round trip time actually contains overhead of reading and writing
 twice to a pipe and 2 context switches - Thus we need to subtract the overhead.
 Table 3 summarizes the results.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
Table 3: Context Switching overhead
\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time 
(
\lang english

\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
mu$s
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Std.
 deviation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipe communication overhead for process
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.31
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Roundtrip time for context switch experiment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipe communication overhead for kernel thread
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Roundtrip time for kernel context switch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.8
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
mu$s
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process Context switch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.61
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kernel Context switch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.30
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
