#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Performance Report on EC2 Instances
\end_layout

\begin_layout Author
Vineet Kumar, Phuc Xuan Nguyen
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Machine Description
\end_layout

\begin_layout Standard
We are aiming to measure the performance on the Amazon's t1.micro instances.
\end_layout

\begin_layout Itemize
1 Elastic Computing Unit
\end_layout

\begin_layout Itemize
Processor: Intel(c) Xeon(R) CPU E5430 @ 2.66Ghz.
\end_layout

\begin_deeper
\begin_layout Itemize
12M L2 Cache, 1333 Mhz FSB
\end_layout

\end_deeper
\begin_layout Itemize
Memory: 592MiB
\end_layout

\begin_layout Itemize
Netword card speed
\end_layout

\begin_deeper
\begin_layout Itemize
Between EC2 Instances: 100MB/s
\end_layout

\end_deeper
\begin_layout Itemize
Disk: Amazon Elastic Block (EBS)
\end_layout

\begin_deeper
\begin_layout Itemize
Size: 7.9GB
\end_layout

\end_deeper
\begin_layout Itemize
Operating System: Ubuntu Oneric 11.10
\end_layout

\begin_layout Section
CPU Operation
\end_layout

\begin_layout Subsection
Measurement overhead
\end_layout

\begin_layout Standard
We are using RDTSC as a fine-grained counter to measure the performance.
 In order to calculate the overhead of RDSTC, we run the following experiment.
\end_layout

\begin_layout Standard
Function 1:
\end_layout

\begin_layout Itemize
Get initial clock counter
\end_layout

\begin_layout Itemize
Repeat N times:
\end_layout

\begin_deeper
\begin_layout Itemize
Run RDTSC
\end_layout

\begin_layout Itemize
Perform a random function f
\end_layout

\end_deeper
\begin_layout Itemize
Return the difference between the current and the initial clock counter.
\end_layout

\begin_layout Standard
Function 2:
\end_layout

\begin_layout Itemize
Get initial clock counter
\end_layout

\begin_layout Itemize
Repeat N times:
\end_layout

\begin_deeper
\begin_layout Itemize
Perform a random function f
\end_layout

\end_deeper
\begin_layout Itemize
Return the difference between the current and the initial clock counter
\end_layout

\begin_layout Standard
We find that the variance becomes insignificant when N is around 10000.
 We avoid the possible compiler optimization by running the random function
 f.
\end_layout

\begin_layout Standard
We calculate the difference in the result of Function 2 and Function 1 and
 divide that by N to find the overhead of RDTSC.
 In the t1.micro instance.
\end_layout

\begin_layout Subsection
Procedure call overhead
\end_layout

\begin_layout Standard
To find out the procedure call overhead, we perform two simple operations
 (int x = 1+1; int y = x;) in 9 different scenarios: no procedure call and
 procedure calls with the 0-7 parameters.
 Figure ? describes the increment in overhead.
\end_layout

\begin_layout Standard
The result is gathered after running 1,000,000 iterations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/phuc/workspace/CS221A-Project/procedure_call_result.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Clock cycle(param)* -1 means no procedure call
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
System call overhead
\end_layout

\begin_layout Subsection
Task creation time
\end_layout

\begin_layout Subsection
Context switching time
\end_layout

\end_body
\end_document
